{"version":3,"sources":["webpack://phasors/../node_modules/@lachlandk/pulsar/dist/pulsar/helpers/propertySetters.js","webpack://phasors/../node_modules/@lachlandk/pulsar/dist/pulsar/core/activeCanvases.js","webpack://phasors/../node_modules/@lachlandk/pulsar/dist/pulsar/Defaults.js","webpack://phasors/../node_modules/@lachlandk/pulsar/dist/pulsar/core/TimeEvolutionController.js","webpack://phasors/../node_modules/@lachlandk/pulsar/dist/pulsar/core/ResponsiveCanvas.js","webpack://phasors/../node_modules/@lachlandk/pulsar/dist/pulsar/plotting/ResponsivePlot2DTrace.js","webpack://phasors/../node_modules/@lachlandk/pulsar/dist/pulsar/helpers/generators.js","webpack://phasors/../node_modules/@lachlandk/pulsar/dist/pulsar/plotting/ResponsivePlot2D.js","webpack://phasors/../node_modules/@lachlandk/pulsar/dist/pulsar/Plot.js","webpack://phasors/./src/OscillatorComponent.js","webpack://phasors/./src/ResultantOscillatorComponent.js","webpack://phasors/../node_modules/@lachlandk/pulsar/dist/pulsar/index.js","webpack://phasors/./src/PhasorsApp.js","webpack://phasors/./src/index.js"],"names":["propertySetters","setAxesProperty","instance","property","expectedType","values","length","properties","x","y","setSingleProperty","value","setArrayProperty","Array","isArray","setChoiceProperty","choices","validChoice","choice","activeCanvases","Defaults","constructor","this","ResponsiveCanvas","origin","backgroundCSS","ResponsivePlot2D","majorTicks","minorTicks","majorTickSize","minorTickSize","majorGridlines","minorGridlines","majorGridSize","minorGridSize","xLims","yLims","ResponsivePlot2DTrace","traceColour","traceStyle","traceWidth","markerColour","markerStyle","markerSize","visibility","parameterRange","create","protos","Object","assign","from","proto","mergeOptions","type","options","option","keys","setterFunc","charAt","toUpperCase","slice","undefined","call","Time","canvasTimeData","globalLoopActive","startTimestamp","offsetTimestamp","startAll","object","timeEvolutionActive","performance","now","window","requestAnimationFrame","timestamp","updateObjects","pauseAll","stopAll","id","currentTimeValue","updateForeground","currentTimestamp","atLeastOneActiveCanvas","addObject","sync","find","push","canvasContainer","document","createElement","style","display","width","height","backgroundCanvas","gridArea","foregroundCanvas","appendChild","resizeObserver","ResizeObserver","entries","entry","resizeEventListener","updateBackground","observe","_displayData","originArgCache","parentElement","background","getContext","foreground","backgroundFunction","foregroundFunction","setID","target","clientWidth","clientHeight","setOrigin","translate","clearRect","setBackground","drawingFunction","setForeground","point","Math","round","resetTransform","setBackgroundCSS","cssString","show","element","Element","querySelector","hide","removeChild","plot","data","i","xValue","yValue","t","discreteFunctionGenerator","discreteMapGenerator","step","paramLims","p","parametricFunctionGenerator","func","Number","isNaN","setTraceColour","colour","updatePlottingData","setTraceStyle","setTraceWidth","setMarkerColour","setMarkerStyle","setMarkerSize","size","setVisibility","setParameterRange","min","max","super","gridScale","context","drawGridSet","majorOrMinor","xy","ticksOrGridlines","lineStart","lineEnd","offset","intervalSize","lineWidth","beginPath","currentValue","floor","moveTo","lineTo","stroke","lineCap","strokeStyle","setXLims","setYLims","timeValue","datasetID","dataset","lineJoin","setLineDash","dataGenerator","currentPoint","isSafeInteger","MAX_SAFE_INTEGER","MIN_SAFE_INTEGER","fillStyle","drawMarker","arc","PI","fill","theta","rotate","lastPoint","NaN","angle","atan2","addData","removeData","trace","setMajorTicks","setMinorTicks","setMajorTickSize","sizes","setMinorTickSize","setMajorGridlines","setMinorGridlines","setMajorGridSize","setMinorGridSize","abs","Plot","activePlots","canvasID","OscillatorComponent","HTMLElement","app","order","frequency","DEF_FREQ","amplitude","DEF_AMP","phase","innerHTML","MIN_FREQ","MAX_FREQ","MIN_AMP","MAX_AMP","classList","add","phasor","cos","sin","wave","addEventListener","event","parseFloat","updatePlots","resultantOscillator","innerText","contains","removeOscillator","addOscillator","animationsActive","remove","ResultantOscillatorComponent","activeOscillators","reduce","acc","osc","oscillator","core","PhasorsApp","customElements","define","insertBefore","oscillatorScrollArea","startButton","pauseButton","stopButton","disabled","params","splice","body"],"mappings":"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","file":"bundle.js","sourcesContent":["export const propertySetters = {\n    setAxesProperty(instance, property, expectedType, ...values) {\n        if (values.length === 1 && typeof values[0] === expectedType) {\n            instance.properties[property] = {\n                x: values[0],\n                y: values[0]\n            };\n        }\n        else if (values.length === 2 && typeof values[0] === expectedType && typeof values[1] === expectedType) {\n            instance.properties[property] = {\n                x: values[0],\n                y: values[1]\n            };\n        }\n        else {\n            throw `Error setting axes property ${property}: Unexpected value ${values}.`;\n        }\n    },\n    setSingleProperty(instance, property, expectedType, value) {\n        if (typeof value === expectedType) {\n            instance.properties[property] = value;\n        }\n        else {\n            throw `Error setting single property ${property}: Unexpected type \"${value}\".`;\n        }\n    },\n    setArrayProperty(instance, property, expectedType, values, length) {\n        if (!Array.isArray(values)) {\n            throw `Error setting array property ${property}: \"${values}\" is not an array.`;\n        }\n        else if (values.length !== length) {\n            throw `Error setting array property ${property}: \"${values}\" is not of length ${length}`;\n        }\n        else {\n            for (const value of values) {\n                if (typeof value !== expectedType) {\n                    throw `Error setting array property ${property}: \"Unexpected type \"${value}\" in array.`;\n                }\n            }\n            instance.properties[property] = values;\n        }\n    },\n    setChoiceProperty(instance, property, expectedType, value, choices) {\n        if (typeof value === expectedType) {\n            let validChoice = false;\n            for (const choice of choices) {\n                if (value === choice) {\n                    instance.properties[property] = value;\n                    validChoice = true;\n                }\n            }\n            if (!validChoice) {\n                throw `Error setting choice property ${property}: Invalid choice \"${value}\".`;\n            }\n        }\n        else {\n            throw `Error setting choice property ${property}: Unexpected type \"${value}\".`;\n        }\n    }\n};\n","/**\n * Object containing the active canvas objects with their ID as the keys. It is used\n * internally by other objects.\n */\nexport const activeCanvases = {};\n","// TODO: this module needs tests\nclass defaults {\n    constructor() {\n        this.values = {\n            ResponsiveCanvas: {\n                origin: { x: 0, y: 0 },\n                backgroundCSS: \"\"\n            },\n            ResponsivePlot2D: {\n                origin: { x: 0, y: 0 },\n                backgroundCSS: \"\",\n                majorTicks: { x: true, y: true },\n                minorTicks: { x: false, y: false },\n                majorTickSize: { x: 5, y: 5 },\n                minorTickSize: { x: 1, y: 1 },\n                majorGridlines: { x: true, y: true },\n                minorGridlines: { x: false, y: false },\n                majorGridSize: { x: 5, y: 5 },\n                minorGridSize: { x: 1, y: 1 },\n                xLims: [0, 10],\n                yLims: [-10, 0]\n            },\n            ResponsivePlot2DTrace: {\n                traceColour: \"blue\",\n                traceStyle: \"solid\",\n                traceWidth: 3,\n                markerColour: \"blue\",\n                markerStyle: \"none\",\n                markerSize: 1,\n                visibility: true,\n                parameterRange: [0, 1]\n            }\n        };\n        // static setDefault(proto: {[property: string]: unknown}, property: string, value: unknown) {\n        //     proto[property] = value;\n        // }\n    }\n    create(...protos) {\n        return Object.assign({}, ...Array.from(protos, (proto) => this.values[proto]));\n    }\n    mergeOptions(instance, type, options) {\n        for (const option of Object.keys(options)) {\n            if (option in this.values[type]) {\n                const setterFunc = instance[`set${option.charAt(0).toUpperCase()}${option.slice(1)}`];\n                if (setterFunc !== undefined) {\n                    setterFunc.call(instance, ...(Array.isArray(options[option]) ? options[option] : [options[option]]));\n                }\n            }\n        }\n    }\n}\nexport const Defaults = new defaults();\n","// TODO: this module needs tests\nimport { activeCanvases } from \"./activeCanvases.js\";\nclass TimeEvolutionController {\n    constructor() {\n        this.canvasTimeData = [];\n        this.globalLoopActive = false;\n        this.startTimestamp = 0;\n        this.offsetTimestamp = 0;\n    }\n    startAll() {\n        for (const object of this.canvasTimeData) {\n            object.timeEvolutionActive = true;\n        }\n        this.startTimestamp = performance.now();\n        this.globalLoopActive = true;\n        window.requestAnimationFrame(timestamp => this.updateObjects(timestamp));\n    }\n    pauseAll() {\n        for (const object of this.canvasTimeData) {\n            object.timeEvolutionActive = false;\n        }\n        this.offsetTimestamp = this.offsetTimestamp + performance.now() - this.startTimestamp;\n    }\n    stopAll() {\n        for (const object of this.canvasTimeData) {\n            object.timeEvolutionActive = false;\n            activeCanvases[object.id].currentTimeValue = 0;\n            activeCanvases[object.id].updateForeground();\n        }\n        this.startTimestamp = 0;\n        this.offsetTimestamp = 0;\n        this.globalLoopActive = false;\n    }\n    updateObjects(currentTimestamp) {\n        if (this.globalLoopActive) {\n            let atLeastOneActiveCanvas = false;\n            for (const object of this.canvasTimeData) {\n                if (object.timeEvolutionActive) {\n                    atLeastOneActiveCanvas = true;\n                    activeCanvases[object.id].currentTimeValue = (this.offsetTimestamp + currentTimestamp - this.startTimestamp) / 1000;\n                    activeCanvases[object.id].updateForeground();\n                }\n            }\n            if (atLeastOneActiveCanvas) {\n                window.requestAnimationFrame(timestamp => this.updateObjects(timestamp));\n            }\n            else {\n                this.globalLoopActive = false;\n            }\n        }\n    }\n    addObject(id, sync = true) {\n        if (this.canvasTimeData.find(object => object.id === id) === undefined) {\n            this.canvasTimeData.push({\n                id: id,\n                timeEvolutionActive: sync,\n            });\n        }\n        else {\n            throw `Error: Time data for canvas object with ID \"${id}\" already exists.`;\n        }\n    }\n}\nexport const Time = new TimeEvolutionController();\n","import { propertySetters } from \"../helpers/index.js\";\nimport { activeCanvases } from \"./activeCanvases.js\";\nimport { Defaults } from \"../Defaults.js\";\nimport { Time } from \"./TimeEvolutionController.js\";\n/**\n * Class representing the base canvas object which all other Pulsar canvas objects inherit from.\n * This class is not meant to be instantiated directly by a user, mainly because it is not very useful by itself.\n * However, it does provide a lot of useful functionality which is used by subclasses.\n * A `ResponsiveCanvas` instance has two drawing surfaces, a background and a foreground.\n * These drawing surfaces can be added to the HTML page as canvas elements by calling `show`.\n * These canvases will then fill the container element, and even change their size when the container element is resized.\n * The coordinate origin of a ResponsiveCanvas can be changed with `setOrigin`, and it can be drawn on and animated\n * by passing a drawing function to `setBackground` or `setForeground`. Read-only properties and methods beginning with\n * an underscore should not be changed/called, otherwise they may cause unpredictable behaviour.\n */\nexport class ResponsiveCanvas {\n    /**\n     * @param id The ID of the canvas object.\n     * @param options  Optional parameters.\n     */\n    constructor(id, options = {}) {\n        /**\n         * The unique ID for the canvas object.\n         */\n        this.id = \"\";\n        /**\n         *\n         */\n        this.properties = Defaults.create(\"ResponsiveCanvas\");\n        this.currentTimeValue = 0;\n        // TODO: add child objects to options to allow more options\n        const canvasContainer = document.createElement(\"div\");\n        canvasContainer.style.display = \"grid\";\n        canvasContainer.style.width = \"100%\";\n        canvasContainer.style.height = \"100%\";\n        const backgroundCanvas = document.createElement(\"canvas\");\n        backgroundCanvas.style.gridArea = \"1 / 1\";\n        const foregroundCanvas = document.createElement(\"canvas\");\n        foregroundCanvas.style.gridArea = \"1 / 1\";\n        canvasContainer.appendChild(backgroundCanvas);\n        canvasContainer.appendChild(foregroundCanvas);\n        const resizeObserver = new ResizeObserver(entries => {\n            for (const entry of entries) {\n                this.resizeEventListener(entry);\n                this.updateBackground();\n                this.updateForeground();\n            }\n        });\n        resizeObserver.observe(canvasContainer);\n        this._displayData = {\n            width: 0,\n            height: 0,\n            originArgCache: null,\n            parentElement: null,\n            resizeObserver: resizeObserver,\n            canvasContainer: canvasContainer,\n            backgroundCanvas: backgroundCanvas,\n            foregroundCanvas: foregroundCanvas,\n            background: backgroundCanvas.getContext(\"2d\"),\n            foreground: foregroundCanvas.getContext(\"2d\"),\n            backgroundFunction: () => { },\n            foregroundFunction: () => { }\n        };\n        Time.addObject(id);\n        this.setID(id);\n        Defaults.mergeOptions(this, \"ResponsiveCanvas\", options);\n    }\n    resizeEventListener(entry) {\n        this._displayData.width = entry.target.clientWidth;\n        this._displayData.height = entry.target.clientHeight;\n        this._displayData.backgroundCanvas.width = this._displayData.width;\n        this._displayData.backgroundCanvas.height = this._displayData.height;\n        this._displayData.foregroundCanvas.width = this._displayData.width;\n        this._displayData.foregroundCanvas.height = this._displayData.height;\n        if (this._displayData.originArgCache !== null) {\n            this.setOrigin(this._displayData.originArgCache);\n        }\n        this._displayData.background.translate(this.properties.origin.x, this.properties.origin.y); // because changing the size of a canvas resets it\n        this._displayData.foreground.translate(this.properties.origin.x, this.properties.origin.y);\n    }\n    /**\n      * Updates the background.\n      */\n    updateBackground() {\n        this._displayData.background.clearRect(-this.properties.origin.x, -this.properties.origin.y, this._displayData.width, this._displayData.height);\n        this._displayData.backgroundFunction(this._displayData.background);\n    }\n    /**\n      * Updates the foreground.\n      */\n    updateForeground() {\n        this._displayData.foreground.clearRect(-this.properties.origin.x, -this.properties.origin.y, this._displayData.width, this._displayData.height);\n        this._displayData.foregroundFunction(this._displayData.foreground, this.currentTimeValue);\n    }\n    /**\n     * Sets the drawing function for the background canvas to `drawingFunction` and updates the canvas.\n     * The argument `drawingFunction` should be a function which takes one or two arguments of its own, the first being the\n     * {@link https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D `CanvasRenderingContext2D`} for the background,\n     * and the second (which is optional) being the current time evolution value for the canvas object (in seconds).\n     * @param drawingFunction The function which draws the background.\n     */\n    setBackground(drawingFunction) {\n        this._displayData.backgroundFunction = drawingFunction;\n        this.updateBackground();\n    }\n    /**\n     * Sets the drawing function for the foreground canvas to `drawingFunction` and updates the canvas.\n     * The argument `drawingFunction` should be a function which takes one or two arguments of its own, the first being the\n     * {@link https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D `CanvasRenderingContext2D`} for the background,\n     * and the second (which is optional) being the current time evolution value for the canvas object (in seconds).\n     * The second argument need only specified if the drawing function contains animations which depend on the current\n     * time value.\n     * @param drawingFunction The function which draws the foreground.\n     */\n    setForeground(drawingFunction) {\n        this._displayData.foregroundFunction = drawingFunction;\n        this.updateForeground();\n    }\n    /**\n     * Sets the origin of both canvases to the point2D specified (in pixels).\n     * Two values may be passed for `x` then `y`, or one value may be passed to set the origins of both axes to the same value.\n     * The string `\"centre\"` may also be passed to conveniently set the origin to the middle of the canvas.\n     * Note that for the HTML5 canvas the origin is in the top-left corner by default and the x-axis points rightwards,\n     * while the y-axis points downwards.\n     * @param point\n     */\n    setOrigin(...point) {\n        if (point.length === 1 && point[0] === \"centre\") {\n            propertySetters.setAxesProperty(this, \"origin\", \"number\", Math.round(this._displayData.width / 2), Math.round(this._displayData.height / 2));\n            this._displayData.originArgCache = point[0];\n        }\n        else {\n            propertySetters.setAxesProperty(this, \"origin\", \"number\", ...point);\n            this._displayData.originArgCache = null;\n        }\n        this._displayData.background.resetTransform();\n        this._displayData.background.translate(this.properties.origin.x, this.properties.origin.y);\n        this.updateBackground();\n        this._displayData.foreground.resetTransform();\n        this._displayData.foreground.translate(this.properties.origin.x, this.properties.origin.y);\n        this.updateForeground();\n    }\n    /**\n     * Sets the ID of the canvas object to the value specified,\n     * which cannot be the same as another existing canvas object.\n     * If the canvas object is active on an HTML page, all of its elements will have their `ID`s updated.\n     * @param id New ID for the canvas object.\n     */\n    setID(id) {\n        if (activeCanvases[id] === undefined) {\n            delete activeCanvases[this.id];\n            Time.canvasTimeData.find(object => object.id === id).id = id;\n            this.id = id;\n            activeCanvases[this.id] = this;\n        }\n        else {\n            throw `Error creating ResponsiveCanvas object: Object with ID \"${id}\" already exists.`;\n        }\n    }\n    /**\n     * Sets the `background` CSS property of the background canvas to the string passed in.\n     * This can be used to set the background for the canvas object to a plain colour, gradient pattern or image\n     * (by default the background is transparent).\n     * @param cssString A valid string for the CSS {@link https://developer.mozilla.org/en-US/docs/Web/CSS/background `background`} property.\n     */\n    setBackgroundCSS(cssString) {\n        propertySetters.setSingleProperty(this, \"backgroundCSS\", \"string\", cssString);\n        this._displayData.backgroundCanvas.style.background = cssString;\n    }\n    // /**\n    //  * Starts or resumes the time evolution of the foreground.\n    //  */\n    // startTime() {}\n    // /**\n    //  * Pauses the time evolution of the foreground.\n    //  */\n    // pauseTime() {}\n    // /**\n    //  * Stops the time evolution of the foreground and resets the current timestamp to 0.\n    //  */\n    // stopTime() {}\n    /**\n     * Display the canvas object in an HTML element.\n     * @param element\n     */\n    show(element) {\n        if (element instanceof Element) {\n            this._displayData.parentElement = element;\n        }\n        else {\n            this._displayData.parentElement = document.querySelector(element);\n        }\n        if (this._displayData.parentElement !== null) {\n            this._displayData.parentElement.appendChild(this._displayData.canvasContainer);\n            this._displayData.width = this._displayData.canvasContainer.clientWidth;\n            this._displayData.height = this._displayData.canvasContainer.clientHeight;\n            if (this._displayData.originArgCache !== null) {\n                this.setOrigin(this._displayData.originArgCache);\n            }\n            this.setBackgroundCSS(this.properties.backgroundCSS); // TODO: shouldn't have to call this again\n        }\n        else {\n            throw `HTMLElement with querySelector \"${element}\" could not be found.`;\n        }\n    }\n    hide() {\n        if (this._displayData.parentElement !== null) {\n            this._displayData.parentElement.removeChild(this._displayData.canvasContainer);\n            this._displayData.parentElement = null;\n        }\n    }\n}\n","// TODO: this module needs tests\nimport { propertySetters, discreteFunctionGenerator, discreteMapGenerator, parametricFunctionGenerator, continuousFunctionGenerator } from \"../helpers/index.js\";\nimport { Defaults } from \"../Defaults.js\";\n/**\n *  This plot represents a trace on a {@link ResponsivePlot2D `ResponsivePlot2D`}.\n */\nexport class ResponsivePlot2DTrace {\n    /**\n     * @param plot The parent plot.\n     * @param data Data to be plotted.\n     * @param options Optional parameters.\n     */\n    constructor(plot, data, options = {}) {\n        this.properties = Defaults.create(\"ResponsivePlot2DTrace\");\n        this.plot = plot; // TODO: remove necessity for this with events?\n        Defaults.mergeOptions(this, \"ResponsivePlot2DTrace\", options);\n        if (Array.isArray(data) && data.length === 2) {\n            if (Array.isArray(data[0])) {\n                if (Array.isArray(data[1])) { // discrete points\n                    if (data[0].length !== data[1].length) {\n                        throw \"Error setting plot data: Lengths of data arrays are not equal.\";\n                    }\n                    for (let i = 0; i < data[0].length; i++) {\n                        const xValue = typeof data[0][i] === \"function\" ? data[0][i](0) : data[0][i];\n                        const yValue = typeof data[1][i] === \"function\" ? data[1][i](0, 0) : data[1][i];\n                        if (typeof xValue !== \"number\" || typeof yValue !== \"number\") {\n                            throw \"Error setting plot data: Data arrays contain types which are not numbers.\";\n                        }\n                    }\n                    this.data = discreteFunctionGenerator(data);\n                }\n                else if (typeof data[1] === \"function\") { // discrete map\n                    if (typeof data[1](0, 0) !== \"number\") {\n                        throw \"Error setting plot data: Plot function does not return numbers.\";\n                    }\n                    for (let i = 0; i < data[0].length; i++) {\n                        if (typeof data[0][i] !== \"number\") {\n                            throw \"Error setting plot data: Data array contains types which are not numbers.\";\n                        }\n                    }\n                    this.data = discreteMapGenerator(data);\n                }\n            }\n            else if (typeof data[0] === \"function\" && typeof data[1] === \"function\") { // parametric function\n                if (typeof data[0](0, 0) !== \"number\" || typeof data[1](0, 0) !== \"number\") {\n                    throw \"Error setting plot data: Plot function does not return numbers.\";\n                }\n                this.data = parametricFunctionGenerator(data);\n            }\n        }\n        else if (typeof data === \"function\") { // continuous function\n            if (typeof data(0, 0) !== \"number\") {\n                throw \"Error setting plot data: Plot function does not return numbers.\";\n            }\n            this.data = continuousFunctionGenerator(data);\n        }\n        else {\n            throw `Error setting plot data: Unrecognised data signature ${data}.`;\n        }\n    }\n    /**\n     * Sets the colour of the specified trace. The specified colour must be one of the browser-recognised colours.\n     * @param colour The name of the colour.\n     */\n    setTraceColour(colour) {\n        propertySetters.setSingleProperty(this, \"traceColour\", \"string\", colour);\n        this.plot.updatePlottingData();\n    }\n    /**\n     * Sets the style of the specified trace. Possible styles are: `solid`, `dotted`, `dashed`, `dashdot`, or `none`.\n     * @param style The name of the style.\n     */\n    setTraceStyle(style) {\n        propertySetters.setChoiceProperty(this, \"traceStyle\", \"string\", style, [\"solid\", \"dotted\", \"dashed\", \"dashdot\", \"none\"]);\n        this.plot.updatePlottingData();\n    }\n    /**\n     * Sets the width of the specified trace (in pixels).\n     * @param width The width of the trace in pixels.\n     */\n    setTraceWidth(width) {\n        propertySetters.setSingleProperty(this, \"traceWidth\", \"number\", width);\n        this.plot.updatePlottingData();\n    }\n    /**\n     * Sets the colour of the markers on the specified trace. The specified colour must be one of the browser-recognised colours.\n     * @param colour The name of the colour.\n     */\n    setMarkerColour(colour) {\n        propertySetters.setSingleProperty(this, \"markerColour\", \"string\", colour);\n        this.plot.updatePlottingData();\n    }\n    /**\n     * Sets the style of the markers the specified trace. Possible styles are: `circle`, `plus`, `cross`, `arrow`, or `none`.\n     * @param style The name of the style.\n     */\n    setMarkerStyle(style) {\n        propertySetters.setChoiceProperty(this, \"markerStyle\", \"string\", style, [\"circle\", \"plus\", \"cross\", \"arrow\", \"none\"]);\n        this.plot.updatePlottingData();\n    }\n    /**\n     * Sets the width of the markers on the specified trace (in pixels).\n     * @param size The size of the markers in pixels.\n     */\n    setMarkerSize(size) {\n        propertySetters.setSingleProperty(this, \"markerSize\", \"number\", size);\n        this.plot.updatePlottingData();\n    }\n    /**\n     * Toggles the visibility of the specified trace.\n     * @param value Set to `true` for the trace to be visible, `false` for it to be hidden.\n     */\n    setVisibility(value) {\n        propertySetters.setSingleProperty(this, \"visibility\", \"boolean\", value);\n        this.plot.updatePlottingData();\n    }\n    /**\n     * Sets the range of values over which a parameter should be plotted.\n     * This property has no effect at all if the function plotted does not have a free parameter.\n     * @param min The minimum value of the free parameter.\n     * @param max The maximum value of the free parameter.\n     */\n    setParameterRange(min, max) {\n        if (max >= min) {\n            propertySetters.setArrayProperty(this, \"parameterRange\", \"number\", [min, max], 2);\n            this.plot.updatePlottingData();\n        }\n        else {\n            throw `Error setting parameterRange: Lower limit cannot be higher than or equal to higher limit.`;\n        }\n    }\n}\n","export function continuousFunctionGenerator(func) {\n    return function* (t, xLims, yLims, step) {\n        // TODO: discontinuities\n        let x = xLims[0];\n        let y = (x) => func(x, t);\n        while (x <= xLims[1]) {\n            while (true) { // while y is out of range or undefined\n                if (x > xLims[1]) { // if x is out of range, break without yielding previous point2D\n                    break;\n                }\n                else if (y(x) <= yLims[1] && y(x) >= yLims[0] && !Number.isNaN(y(x))) { // if y is in range, yield the previous point2D and break\n                    yield [x - step, y(x - step)];\n                    break;\n                }\n                else { // else increment x\n                    x += step;\n                }\n            }\n            while (true) { // while y in in range and defined\n                yield [x, y(x)];\n                if (x > xLims[1] || y(x) > yLims[1] || y(x) < yLims[0] || Number.isNaN(y(x))) { // if x or y is out of range, yield current point2D and break\n                    break;\n                }\n                else { // else increment x\n                    x += step;\n                }\n            }\n        }\n    };\n}\nexport function parametricFunctionGenerator(data) {\n    return function* (t, xLims, yLims, step, paramLims) {\n        let x = (p) => data[0](p, t);\n        let y = (p) => data[1](p, t);\n        let p = paramLims[0];\n        while (p <= paramLims[1]) {\n            yield [x(p), y(p)];\n            p += step;\n        }\n        yield [x(p), y(p)];\n    };\n}\nexport function discreteMapGenerator(data) {\n    return function* (t) {\n        // TODO: add support for NaN\n        for (const x of data[0]) {\n            yield [x, data[1](x, t)];\n        }\n    };\n}\nexport function discreteFunctionGenerator(data) {\n    return function* (t) {\n        // TODO: add support for NaN\n        for (let i = 0; i < data[0].length; i++) {\n            const xValue = typeof data[0][i] === \"function\" ? data[0][i](t) : data[0][i];\n            const yValue = typeof data[1][i] === \"function\" ? data[1][i](xValue, t) : data[1][i];\n            yield [xValue, yValue];\n        }\n    };\n}\n","import { ResponsiveCanvas } from \"../core/ResponsiveCanvas.js\";\nimport { propertySetters } from \"../helpers/index.js\";\nimport { ResponsivePlot2DTrace } from \"./ResponsivePlot2DTrace.js\";\nimport { Defaults } from \"../Defaults.js\";\n/**\n * This class is the base class for all Pulsar plot objects. It extends {@link ResponsiveCanvas `ResponsiveCanvas`}.\n * A `ResponsivePlot2D` object can be created by calling the constructor, but the preferred method is to use the\n * {@link Plot `Plot`} class. `ResponsivePlot2D` objects behave similarly to a `ResponsiveCanvas`.\n * They have a background, which contains the axes and gridlines, and a foreground, which contains the plot data.\n * The ticks and gridlines can be toggled and the intervals between them can be changed.\n * Data is added to the plot using the {@link ResponsivePlot2D.addData `addData()`} method.\n * Read-only properties and methods beginning with an underscore should not be changed/called, otherwise they\n * may cause unpredictable behaviour.\n */\nexport class ResponsivePlot2D extends ResponsiveCanvas {\n    /**\n     * @param id The unique ID of the plot object.\n     * @param options Optional parameters.\n     */\n    constructor(id, options = {}) {\n        super(id, options);\n        this.properties = Defaults.create(\"ResponsiveCanvas\", \"ResponsivePlot2D\");\n        this.gridScale = { x: 0, y: 0 };\n        /**\n         * Contains the data trace objects for the plot instance.\n         * The objects can be accessed using the trace ID as the key.\n         */\n        this.data = {};\n        Defaults.mergeOptions(this, \"ResponsivePlot2D\", options);\n        this.setBackground(context => {\n            const drawGridSet = (majorOrMinor, xy, ticksOrGridlines, width, lineStart, lineEnd) => {\n                const offset = width % 2 === 0 ? 0 : 0.5;\n                const intervalSize = this.properties[`${majorOrMinor + (ticksOrGridlines === \"Ticks\" ? \"TickSize\" : \"GridSize\")}`][xy];\n                context.lineWidth = width;\n                if (this.properties[`${majorOrMinor}${ticksOrGridlines}`][xy]) {\n                    context.beginPath();\n                    let currentValue = -Math.floor(this.properties.origin[xy] / (intervalSize * this.gridScale[xy])) * intervalSize * this.gridScale[xy];\n                    if (xy === \"x\") {\n                        while (currentValue < this._displayData.width - this.properties.origin.x) {\n                            context.moveTo(currentValue + offset, lineStart);\n                            context.lineTo(currentValue + offset, lineEnd);\n                            currentValue += this.gridScale.x * intervalSize;\n                        }\n                    }\n                    else if (xy === \"y\") {\n                        while (currentValue < this._displayData.height - this.properties.origin.y) {\n                            context.moveTo(lineStart, currentValue + offset);\n                            context.lineTo(lineEnd, currentValue + offset);\n                            currentValue += this.gridScale.y * intervalSize;\n                        }\n                    }\n                    context.stroke();\n                }\n            };\n            context.lineCap = \"square\";\n            context.strokeStyle = \"rgb(0, 0, 0)\";\n            drawGridSet(\"minor\", \"x\", \"Gridlines\", 1, -this.properties.origin.y, this._displayData.height - this.properties.origin.y);\n            drawGridSet(\"minor\", \"y\", \"Gridlines\", 1, -this.properties.origin.x, this._displayData.width - this.properties.origin.x);\n            drawGridSet(\"major\", \"x\", \"Gridlines\", 2, -this.properties.origin.y, this._displayData.height - this.properties.origin.y);\n            drawGridSet(\"major\", \"y\", \"Gridlines\", 2, -this.properties.origin.x, this._displayData.width - this.properties.origin.x);\n            drawGridSet(\"minor\", \"x\", \"Ticks\", 1, -3, 3);\n            drawGridSet(\"minor\", \"y\", \"Ticks\", 1, -3, 3);\n            drawGridSet(\"major\", \"x\", \"Ticks\", 2, -6, 6);\n            drawGridSet(\"major\", \"y\", \"Ticks\", 2, -6, 6);\n            context.beginPath();\n            context.lineWidth = 3;\n            context.moveTo(0.5, -this.properties.origin.y);\n            context.lineTo(0.5, this._displayData.height - this.properties.origin.y);\n            context.moveTo(-this.properties.origin.x, 0.5);\n            context.lineTo(this._displayData.width - this.properties.origin.x, 0.5);\n            context.stroke();\n        });\n    }\n    resizeEventListener(entry) {\n        super.resizeEventListener(entry);\n        this.setXLims(...this.properties.xLims);\n        this.setYLims(...this.properties.yLims);\n    }\n    /**\n      * Updates the foreground function.\n      */\n    updatePlottingData() {\n        this.setForeground((context, timeValue) => {\n            for (const datasetID of Object.keys(this.data)) {\n                if (this.data[datasetID].properties.visibility) {\n                    const dataset = this.data[datasetID];\n                    if (dataset.properties.traceStyle !== \"none\") {\n                        context.strokeStyle = dataset.properties.traceColour;\n                        context.lineWidth = dataset.properties.traceWidth;\n                        context.lineJoin = \"round\";\n                        switch (dataset.properties.traceStyle) {\n                            case \"solid\":\n                                context.setLineDash([]);\n                                break;\n                            case \"dotted\":\n                                context.setLineDash([3, 3]);\n                                break;\n                            case \"dashed\":\n                                context.setLineDash([10, 10]);\n                                break;\n                            case \"dashdot\":\n                                context.setLineDash([15, 3, 3, 3]);\n                                break;\n                        }\n                        const dataGenerator = dataset.data(timeValue, this.properties.xLims, this.properties.yLims, 0.01, dataset.properties.parameterRange);\n                        context.beginPath();\n                        for (const currentPoint of dataGenerator) {\n                            if (!Number.isSafeInteger(Math.round(currentPoint[1]))) {\n                                currentPoint[1] = currentPoint[1] > 0 ? Number.MAX_SAFE_INTEGER : Number.MIN_SAFE_INTEGER;\n                            }\n                            context.lineTo(currentPoint[0] * this.gridScale.x, -currentPoint[1] * this.gridScale.y);\n                        }\n                        context.stroke();\n                    }\n                    if (dataset.properties.markerStyle !== \"none\") {\n                        const markerSize = dataset.properties.markerSize;\n                        context.strokeStyle = dataset.properties.markerColour;\n                        context.fillStyle = dataset.properties.markerColour;\n                        context.lineWidth = 2 * markerSize;\n                        const drawMarker = (() => {\n                            switch (dataset.properties.markerStyle) {\n                                case \"circle\":\n                                    return (context, x, y) => {\n                                        context.arc(x, y, 5 * markerSize, 0, 2 * Math.PI);\n                                        context.fill();\n                                    };\n                                case \"plus\":\n                                    return (context, x, y) => {\n                                        context.moveTo(x, y + 5 * markerSize);\n                                        context.lineTo(x, y - 5 * markerSize);\n                                        context.moveTo(x + 5 * markerSize, y);\n                                        context.lineTo(x - 5 * markerSize, y);\n                                        context.stroke();\n                                    };\n                                case \"cross\":\n                                    return (context, x, y) => {\n                                        context.moveTo(x + 5 * markerSize, y + 5 * markerSize);\n                                        context.lineTo(x - 5 * markerSize, y - 5 * markerSize);\n                                        context.moveTo(x - 5 * markerSize, y + 5 * markerSize);\n                                        context.lineTo(x + 5 * markerSize, y - 5 * markerSize);\n                                        context.stroke();\n                                    };\n                                case \"arrow\":\n                                    return (context, x, y, theta) => {\n                                        if (!isNaN(theta)) {\n                                            context.translate(x, y);\n                                            context.rotate(-theta - Math.PI / 2);\n                                            context.moveTo(0, -7 * markerSize);\n                                            context.lineTo(-5 * markerSize, 7 * markerSize);\n                                            context.lineTo(5 * markerSize, 7 * markerSize);\n                                            context.lineTo(0, -7 * markerSize);\n                                            context.fill();\n                                            context.rotate(theta + Math.PI / 2);\n                                            context.translate(-x, -y);\n                                        }\n                                    };\n                            }\n                        })();\n                        const dataGenerator = dataset.data(timeValue, this.properties.xLims, this.properties.yLims, 0.001, dataset.properties.parameterRange);\n                        let lastPoint = [NaN, NaN];\n                        for (const currentPoint of dataGenerator) {\n                            context.beginPath();\n                            const point = [currentPoint[0] * this.gridScale.x, -currentPoint[1] * this.gridScale.y];\n                            const angle = Math.atan2(point[1] - lastPoint[1], -point[0] + lastPoint[0]);\n                            drawMarker(context, ...point, angle); // TODO: fix this (typescript thinks drawMarker can be null (because the defaults aren't typed))\n                            lastPoint = point;\n                        }\n                    }\n                }\n            }\n        });\n    }\n    /**\n     * Adds a data trace to the plot. The trace must be given a unique ID, so that it can be added to the\n     * {@link ResponsivePlot2D.data `data`} property of the plot object.\n     * There are several ways that data can be added, which can be divided into **continuous** and **discrete** data.\n     * These different methods are described by what to pass for the `data` argument.\n     * @param id Unique ID for the trace.\n     * @param data Data to be plotted.\n     * @param options Optional parameters.\n     */\n    addData(id, data, options = {}) {\n        if (this.data[id] === undefined) {\n            this.data[id] = new ResponsivePlot2DTrace(this, data, options);\n            this.updatePlottingData();\n        }\n        else {\n            throw `Error setting plot data: trace with ID ${id} already exists on current plot, call removeData() to remove.`;\n        }\n    }\n    /**\n     * Removes a trace from the plot.\n     * @param trace ID of the trace to be removed.\n     */\n    removeData(trace) {\n        delete this.data[trace];\n        this.updatePlottingData();\n    }\n    setOrigin(...point) {\n        super.setOrigin(...point);\n        if (this._displayData.parentElement !== null && this.gridScale.x > 0 && this.gridScale.y > 0) {\n            this.properties.xLims = [-this.properties.origin.x / this.gridScale.x, (this._displayData.width - this.properties.origin.x) / this.gridScale.x];\n            this.properties.yLims = [-(this._displayData.height - this.properties.origin.y) / this.gridScale.y, this.properties.origin.y / this.gridScale.y];\n            this.updatePlottingData();\n        }\n    }\n    /**\n     * Toggles the major ticks. Two values may be passed for `x` then `y`, or just a single value for both axes.\n     * @param choices Either one or two booleans.\n     */\n    setMajorTicks(...choices) {\n        propertySetters.setAxesProperty(this, \"majorTicks\", \"boolean\", ...choices);\n        this.updateBackground();\n    }\n    /**\n     * Toggles the minor ticks. Two values may be passed for `x` then `y`, or just a single value for both axes.\n     * @param choices Either one or two booleans.\n     */\n    setMinorTicks(...choices) {\n        propertySetters.setAxesProperty(this, \"minorTicks\", \"boolean\", ...choices);\n        this.updateBackground();\n    }\n    /**\n     * Sets the spacing of the major ticks (in grid units). Two values may be passed for `x` then `y`, or just a single value for both axes.\n     * @param sizes Either one or two numbers.\n     */\n    setMajorTickSize(...sizes) {\n        propertySetters.setAxesProperty(this, \"majorTickSize\", \"number\", ...sizes);\n        this.updateBackground();\n    }\n    /**\n     * Sets the spacing of the minor ticks (in grid units). Two values may be passed for `x` then `y`, or just a single value for both axes.\n     * @param sizes Either one or two numbers.\n     */\n    setMinorTickSize(...sizes) {\n        propertySetters.setAxesProperty(this, \"minorTickSize\", \"number\", ...sizes);\n        this.updateBackground();\n    }\n    /**\n     * Toggles the major gridlines. Two values may be passed for `x` then `y`, or just a single value for both axes.\n     * @param choices Either one or two booleans.\n     */\n    setMajorGridlines(...choices) {\n        propertySetters.setAxesProperty(this, \"majorGridlines\", \"boolean\", ...choices);\n        this.updateBackground();\n    }\n    /**\n     * Toggles the minor gridlines. Two values may be passed for `x` then `y`, or just a single value for both axes.\n     * @param choices Either one or two booleans.\n     */\n    setMinorGridlines(...choices) {\n        propertySetters.setAxesProperty(this, \"minorGridlines\", \"boolean\", ...choices);\n        this.updateBackground();\n    }\n    /**\n     * Sets the spacing of the major gridlines (in grid units). Two values may be passed for `x` then `y`, or just a single value for both axes.\n     * @param sizes Either one or two numbers.\n     */\n    setMajorGridSize(...sizes) {\n        propertySetters.setAxesProperty(this, \"majorGridSize\", \"number\", ...sizes);\n        this.updateBackground();\n    }\n    /**\n     * Sets the spacing of the minor gridlines (in grid units). Two values may be passed for `x` then `y`, or just a single value for both axes.\n     * @param sizes Either one or two numbers.\n     */\n    setMinorGridSize(...sizes) {\n        propertySetters.setAxesProperty(this, \"minorGridSize\", \"number\", ...sizes);\n        this.updateBackground();\n    }\n    /**\n     * Changes the range of `x` values to be shown on the plot by moving the origin and altering the grid scale.\n     * @param min The minimum value of `x`.\n     * @param max The maximum value of `x`.\n     */\n    setXLims(min, max) {\n        if (max >= min) {\n            propertySetters.setArrayProperty(this, \"xLims\", \"number\", [min, max], 2);\n            this.gridScale.x = this._displayData.width / Math.abs(this.properties.xLims[0] - this.properties.xLims[1]);\n            this.setOrigin(-this.properties.xLims[0] * this.gridScale.x, this.properties.origin.y);\n            this.updatePlottingData();\n        }\n        else {\n            throw `Error setting xLims: Lower limit cannot be higher than or equal to higher limit.`;\n        }\n    }\n    /**\n     * Changes the range of `y` values to be shown on the plot by moving the origin and altering the grid scale.\n     * @param min The minimum value of `y`.\n     * @param max The maximum value of `y`.\n     */\n    setYLims(min, max) {\n        if (max >= min) {\n            propertySetters.setArrayProperty(this, \"yLims\", \"number\", [min, max], 2);\n            this.gridScale.y = this._displayData.height / Math.abs(this.properties.yLims[0] - this.properties.yLims[1]);\n            this.setOrigin(this.properties.origin.x, this.properties.yLims[1] * this.gridScale.y);\n            this.updatePlottingData();\n        }\n        else {\n            throw `Error setting yLims: Lower limit cannot be higher than or equal to higher limit.`;\n        }\n    }\n    show(element) {\n        super.show(element);\n        this.setXLims(...this.properties.xLims);\n        this.setYLims(...this.properties.yLims);\n    }\n}\n","import { ResponsivePlot2D } from \"./plotting/index.js\";\nimport { activeCanvases } from \"./core/index.js\";\nexport class Plot extends ResponsivePlot2D {\n    /**\n     * Returns an object containing the active instances of {@link Plot `Plot`}.\n     */\n    static activePlots() {\n        const activePlots = {};\n        for (const canvasID of Object.keys(activeCanvases)) {\n            if (activeCanvases[canvasID] instanceof Plot) {\n                activePlots[canvasID] = activeCanvases[canvasID];\n            }\n        }\n        return activePlots;\n    }\n    /**\n     * @param id - The ID of the plot object. Must be unique.\n     * @param data - The data to be plotted. The structure of the object follows the exact same pattern as the signature of {@link ResponsivePlot2D.plot `plot()`}.\n     * @param data.id - The ID for the trace. This ID will be the key for the relevant entry in the {@link ResponsivePlot2D.data `data`} property of the plot object.\n     * @param data.data - The data to be plotted. See the {@link ResponsivePlot2D.plot `plot()`} method documentation for more details.\n     * @param data.object - The options for the data. See the {@link ResponsivePlot2D.plot `plot()`} method documentation for more details.\n     * @param options - Options for the plot.\n     */\n    constructor(id, data, options = {}) {\n        super(id, options);\n        if (data !== undefined) {\n            this.addData(data.id, data.data, data.options);\n        }\n    }\n}\n","import { Plot } from \"@lachlandk/pulsar\";\r\n\r\nexport class OscillatorComponent extends HTMLElement {\r\n\tstatic MIN_FREQ = 0.1;\r\n\tstatic MAX_FREQ = 2;\r\n\tstatic DEF_FREQ = 1;\r\n\tstatic MIN_AMP = 0.1;\r\n\tstatic MAX_AMP = 2;\r\n\tstatic DEF_AMP = 1;\r\n\r\n\tconstructor(app, order, frequency = OscillatorComponent.DEF_FREQ, amplitude = OscillatorComponent.DEF_AMP, phase = 0) {\r\n\t\tsuper();\r\n\r\n\t\tthis.app = app;\r\n\t\tthis.order = order;\r\n\t\tthis.frequency = frequency\r\n\t\tthis.amplitude = amplitude\r\n\t\tthis.phase = phase;\r\n\r\n\t\tthis.innerHTML = `\r\n\t\t\t<div class=\"oscillator-controls\">\r\n\t\t\t\t<h2 class=\"oscillator-title\">Oscillator ${this.order + 1}</h2>\r\n\t\t\t\t<label class=\"oscillator-label\">\r\n\t\t\t\t\t<input class=\"oscillator-slider frequency-input\" type=\"range\" min=\"${OscillatorComponent.MIN_FREQ}\" max=\"${OscillatorComponent.MAX_FREQ}\" step=\"0.01\" value=\"${this.frequency}\">\r\n\t\t\t\t\tFrequency: <span class=\"oscillator-label-value\">${this.frequency}</span>Hz\r\n\t\t\t\t</label>\r\n\t\t\t\t<label class=\"oscillator-label\">\r\n\t\t\t\t\t<input class=\"oscillator-slider amplitude-input\" type=\"range\" min=\"${OscillatorComponent.MIN_AMP}\" max=\"${OscillatorComponent.MAX_AMP}\" step=\"0.01\" value=\"${this.amplitude}\">\r\n\t\t\t\t\tAmplitude: <span class=\"oscillator-label-value\">${this.amplitude}</span>m\r\n\t\t\t\t</label>\r\n\t\t\t\t<label class=\"oscillator-label\">\r\n\t\t\t\t\t<input class=\"oscillator-slider phase-input\" type=\"range\" min=\"${-2 * Math.PI}\" max=\"${2 * Math.PI}\" step=\"0.01\" value=\"${this.phase}\">\r\n\t\t\t\t\tPhase shift: <span class=\"oscillator-label-value\">${+(Math.round(+((this.phase/Math.PI)+\"e+2\"))+\"e-2\")}</span>pi\r\n\t\t\t\t</label>\r\n\t\t\t</div>\r\n\t\t\t<figure class=\"phasor\"></figure>\r\n\t\t\t<figure class=\"wave\">\r\n\t\t\t\t<div class=\"oscillator-button-bar\">\r\n\t\t\t\t\t<button type=\"button\" class=\"hide-button\">Hide</button>\r\n\t\t\t\t\t<button type=\"button\" class=\"duplicate-button\">Duplicate</button>\r\n\t\t\t\t\t<button type=\"button\" class=\"remove-button\">Remove</button>\r\n\t\t\t\t</div>\r\n\t\t\t</figure>\r\n\t\t`;\r\n\t\tthis.classList.add(\"oscillator-container\");\r\n\r\n\t\tthis.phasor = new Plot(`phasor-${this.order}`, undefined, {\r\n\t\t\tbackgroundCSS: \"lightseagreen\",\r\n\t\t\tmajorGridlines: false,\r\n\t\t\tminorGridlines: true,\r\n\t\t\tmajorTicks: false,\r\n\t\t\tminorTicks: true,\r\n\t\t\tminorTickSize: 0.25,\r\n\t\t\txLims: [-3, 3],\r\n\t\t\tyLims: [-3, 3]\r\n\t\t});\r\n\t\tthis.phasor.addData(\"phasor-x-component\", [\r\n\t\t\t[0, t => this.amplitude*Math.cos((2*Math.PI*this.frequency*t)+this.phase), t => this.amplitude*Math.cos((2*Math.PI*this.frequency*t)+this.phase)],\r\n\t\t\t[0, 0, (x, t) => this.amplitude*Math.sin((2*Math.PI*this.frequency*t)+this.phase)]\r\n\t\t], {\r\n\t\t\ttraceColour: \"red\",\r\n\t\t\tmarkerStyle: \"arrow\",\r\n\t\t\tmarkerColour: \"red\",\r\n\t\t\tvisibility: false\r\n\t\t});\r\n\t\tthis.phasor.addData(\"phasor\", [\r\n\t\t\t[0, t => this.amplitude*Math.cos((2*Math.PI*this.frequency*t)+this.phase)],\r\n\t\t\t[0, (x, t) => this.amplitude*Math.sin((2*Math.PI*this.frequency*t)+this.phase)]\r\n\t\t], {\r\n\t\t\ttraceColour: \"yellow\",\r\n\t\t\tmarkerColour: \"yellow\",\r\n\t\t\tmarkerStyle: \"arrow\"\r\n\t\t});\r\n\t\tthis.wave = new Plot(`wave-${this.order}`, undefined, {\r\n\t\t\tbackgroundCSS: \"lightseagreen\",\r\n\t\t\tmajorGridlines: false,\r\n\t\t\tminorGridlines: true,\r\n\t\t\tmajorTicks: false,\r\n\t\t\tminorTicks: true,\r\n\t\t\tminorTickSize: 0.25,\r\n\t\t\txLims: [-2, 10],\r\n\t\t\tyLims: [-3, 3]\r\n\t\t});\r\n\t\tthis.wave.addData(\"wave\", (x, t) => this.amplitude*Math.cos((2*Math.PI*this.frequency*(x-t))-this.phase), {\r\n\t\t\ttraceColour: \"yellow\"\r\n\t\t});\r\n\r\n\t\tthis.querySelector(`.frequency-input`).addEventListener(\"input\", event => {\r\n\t\t\tthis.frequency = parseFloat(event.target.value);\r\n\t\t\tthis.updatePlots();\r\n\t\t\tthis.app.resultantOscillator.updatePlots();\r\n\t\t\tevent.target.parentElement.querySelector(\".oscillator-label-value\").innerText = event.target.value;\r\n\t\t});\r\n\t\tthis.querySelector(`.amplitude-input`).addEventListener(\"input\", event => {\r\n\t\t\tthis.amplitude = parseFloat(event.target.value);\r\n\t\t\tthis.updatePlots();\r\n\t\t\tthis.app.resultantOscillator.updatePlots();\r\n\t\t\tevent.target.parentElement.querySelector(\".oscillator-label-value\").innerText = event.target.value;\r\n\t\t});\r\n\t\tthis.querySelector(`.phase-input`).addEventListener(\"input\", event => {\r\n\t\t\tthis.phase = parseFloat(event.target.value);\r\n\t\t\tthis.updatePlots();\r\n\t\t\tthis.app.resultantOscillator.updatePlots();\r\n\t\t\tevent.target.parentElement.querySelector(\".oscillator-label-value\").innerText = +(Math.round(+((event.target.value/Math.PI)+\"e+2\"))+\"e-2\");\r\n\t\t});\r\n\t\tthis.querySelector(`.hide-button`).addEventListener(\"click\", event => {\r\n\t\t\tif (!this.classList.contains(\"hidden\")) {\r\n\t\t\t\tthis.hide();\r\n\t\t\t\tevent.target.innerText = \"Show\";\r\n\t\t\t} else {\r\n\t\t\t\tthis.show();\r\n\t\t\t\tevent.target.innerText = \"Hide\";\r\n\t\t\t}\r\n\t\t});\r\n\t\tthis.querySelector(`.remove-button`).addEventListener(\"click\", () => {\r\n\t\t\tthis.app.removeOscillator(this);\r\n\t\t});\r\n\t\tthis.querySelector(`.duplicate-button`).addEventListener(\"click\", () => {\r\n\t\t\tthis.app.addOscillator(this.frequency, this.amplitude, this.phase);\r\n\t\t});\r\n\t\tthis.phasor.show(this.querySelector(\".phasor\"));\r\n\t\tthis.wave.show(this.querySelector(\".wave\"));\r\n\t}\r\n\r\n\tupdatePlots() {\r\n\t\tif (!this.app.animationsActive) {\r\n\t\t\tthis.phasor.updatePlottingData();\r\n\t\t\tthis.wave.updatePlottingData();\r\n\t\t}\r\n\t}\r\n\r\n\tshow() {\r\n\t\tthis.classList.remove(\"hidden\");\r\n\t\tthis.phasor.data[\"phasor\"].setVisibility(true);\r\n\t\tthis.wave.data[\"wave\"].setVisibility(true);\r\n\t}\r\n\r\n\thide() {\r\n\t\tthis.classList.add(\"hidden\");\r\n\t\tthis.phasor.data[\"phasor\"].setVisibility(false);\r\n\t\tthis.phasor.data[\"phasor-x-component\"].setVisibility(false);\r\n\t\tthis.wave.data[\"wave\"].setVisibility(false);\r\n\t}\r\n}\r\n","import { Plot } from \"@lachlandk/pulsar\";\r\n\r\nexport class ResultantOscillatorComponent extends HTMLElement {\r\n\tconstructor(app) {\r\n\t\tsuper();\r\n\r\n\t\tthis.app = app;\r\n\r\n\t\tthis.innerHTML = `\r\n\t\t\t<div class=\"oscillator-controls\">\r\n\t\t\t\t<h2 class=\"oscillator-title\">Resultant Oscillator</h2>\r\n\t\t\t\t<button type=\"button\" id=\"add-oscillator-button\">Add Oscillator</button>\r\n\t\t\t\t<button type=\"button\" id=\"show-x-components-button\"><span>Show</span> x Components</button>\r\n\t\t\t\t<div class=\"inline-oscillator-controls\">\r\n\t\t\t\t\t<button type=\"button\" id=\"show-all-button\">Show All</button>\r\n\t\t\t\t\t<button type=\"button\" id=\"hide-all-button\">Hide All</button>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t\t<figure id=\"resultant-phasor\" class=\"phasor\"></figure>\r\n\t\t\t<figure id=\"resultant-wave\" class=\"wave\"></figure>\r\n\t\t`;\r\n\t\tthis.id = \"resultant-oscillator\";\r\n\t\tthis.classList.add(\"oscillator-container\");\r\n\r\n\t\t//[[0, t => 4*Math.cos(t), t => 4*Math.cos(t)+2*Math.cos(2*t), t => 4*Math.cos(t)+2*Math.cos(2*t)+Math.cos(3*t)], [0, (x, t) => 4*Math.sin(t), (x, t) => 4*Math.sin(t)+2*Math.sin(2*t), (x, t) => 4*Math.sin(t)+2*Math.sin(2*t)+Math.sin(3*t)]]\r\n\r\n\t\tthis.phasor = new Plot(\"resultant-phasor\", undefined, {\r\n\t\t\tbackgroundCSS: \"lightseagreen\",\r\n\t\t\tmajorGridlines: false,\r\n\t\t\tminorGridlines: true,\r\n\t\t\tmajorTicks: false,\r\n\t\t\tminorTicks: true,\r\n\t\t\tminorTickSize: 0.25,\r\n\t\t\txLims: [-5, 5],\r\n\t\t\tyLims: [-5, 5]\r\n\t\t});\r\n\t\tthis.phasor.addData(\"phasor-x-component\", [\r\n\t\t\t[0, t => this.app.activeOscillators.reduce((acc, osc) => acc + osc.amplitude*Math.cos((2*Math.PI*osc.frequency*t)+osc.phase), 0), t => this.app.activeOscillators.reduce((acc, osc) => acc + osc.amplitude*Math.cos((2*Math.PI*osc.frequency*t)+osc.phase), 0)],\r\n\t\t\t[0, 0, (x, t) => this.app.activeOscillators.reduce((acc, osc) => acc + osc.amplitude*Math.sin((2*Math.PI*osc.frequency*t)+osc.phase), 0)]\r\n\t\t], {\r\n\t\t\ttraceColour: \"red\",\r\n\t\t\tmarkerStyle: \"arrow\",\r\n\t\t\tmarkerColour: \"red\",\r\n\t\t\tvisibility: false\r\n\t\t});\r\n\t\tthis.phasor.addData(\"resultant-phasor\", [\r\n\t\t\t[0, t => this.app.activeOscillators.reduce((acc, osc) => acc + osc.amplitude*Math.cos((2*Math.PI*osc.frequency*t)+osc.phase), 0)],\r\n\t\t\t[0, (x, t) => this.app.activeOscillators.reduce((acc, osc) => acc + osc.amplitude*Math.sin((2*Math.PI*osc.frequency*t)+osc.phase), 0)]\r\n\t\t], {\r\n\t\t\ttraceColour: \"yellow\",\r\n\t\t\tmarkerColour: \"yellow\",\r\n\t\t\tmarkerStyle: \"arrow\"\r\n\t\t})\r\n\r\n\t\tthis.wave = new Plot(\"resultant-wave\", {\r\n\t\t\tid: \"resultant-phasor\",\r\n\t\t\tdata: (x, t) => this.app.activeOscillators.reduce((acc, osc) => acc + osc.amplitude*Math.cos((2*Math.PI*osc.frequency*(x-t))-osc.phase), 0),\r\n\t\t\toptions: {\r\n\t\t\t\ttraceColour: \"yellow\"\r\n\t\t\t}\r\n\t\t}, {\r\n\t\t\tbackgroundCSS: \"lightseagreen\",\r\n\t\t\tmajorGridlines: false,\r\n\t\t\tminorGridlines: true,\r\n\t\t\tmajorTicks: false,\r\n\t\t\tminorTicks: true,\r\n\t\t\tminorTickSize: 0.25,\r\n\t\t\txLims: [-2, 10],\r\n\t\t\tyLims: [-5, 5]\r\n\t\t});\r\n\r\n\t\tthis.querySelector(\"#add-oscillator-button\").addEventListener(\"click\", () => this.app.addOscillator());\r\n\t\tthis.querySelector(\"#show-all-button\").addEventListener(\"click\", () => {\r\n\t\t\tfor (const oscillator of this.app.activeOscillators) {\r\n\t\t\t\toscillator.show();\r\n\t\t\t}\r\n\t\t});\r\n\t\t// TODO: x-components button doesn't work together with show/hide all\r\n\t\tthis.querySelector(\"#show-x-components-button\").addEventListener(\"click\", event => {\r\n\t\t\tif (event.target.querySelector(\"span\").innerText === \"Show\") {\r\n\t\t\t\tevent.target.querySelector(\"span\").innerText = \"Hide\";\r\n\t\t\t\tthis.phasor.data[\"phasor-x-component\"].setVisibility(true);\r\n\t\t\t\tfor (const oscillator of this.app.activeOscillators) {\r\n\t\t\t\t\toscillator.phasor.data[\"phasor-x-component\"].setVisibility(true);\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tevent.target.querySelector(\"span\").innerText = \"Show\";\r\n\t\t\t\tthis.phasor.data[\"phasor-x-component\"].setVisibility(false);\r\n\t\t\t\tfor (const oscillator of this.app.activeOscillators) {\r\n\t\t\t\t\toscillator.phasor.data[\"phasor-x-component\"].setVisibility(false);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t\tthis.querySelector(\"#hide-all-button\").addEventListener(\"click\", () => {\r\n\t\t\tfor (const oscillator of this.app.activeOscillators) {\r\n\t\t\t\toscillator.hide();\r\n\t\t\t}\r\n\t\t});\r\n\t\tthis.phasor.show(this.querySelector(\".phasor\"));\r\n\t\tthis.wave.show(this.querySelector(\".wave\"));\r\n\t}\r\n\r\n\tupdatePlots() {\r\n\t\tif (!this.app.animationsActive) {\r\n\t\t\tthis.phasor.updatePlottingData();\r\n\t\t\tthis.wave.updatePlottingData();\r\n\t\t}\r\n\t}\r\n}\r\n","/**\n * @licence\n * Pulsar.js - A javascript data visualisation framework\n * Copyright (C) 2021  Lachlan Dufort-Kennett\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\n*/\nimport { ResponsiveCanvas, activeCanvases } from \"./core/index.js\";\nexport const core = {\n    ResponsiveCanvas: ResponsiveCanvas,\n    activeCanvases: activeCanvases\n};\nimport { ResponsivePlot2D, ResponsivePlot2DTrace } from \"./plotting/index.js\";\nexport const plotting = {\n    ResponsivePlot2D: ResponsivePlot2D,\n    ResponsivePlot2DTrace: ResponsivePlot2DTrace\n};\nexport { Time } from \"./core/index.js\";\nexport * from \"./Defaults.js\";\nexport * from \"./Plot.js\";\n","import { OscillatorComponent } from \"./OscillatorComponent.js\";\r\nimport { ResultantOscillatorComponent } from \"./ResultantOscillatorComponent.js\";\r\nimport { core, Plot, Time } from \"@lachlandk/pulsar\";\r\n\r\nexport class PhasorsApp extends HTMLElement {\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\twindow.customElements.define(\"oscillator-component\", OscillatorComponent);\r\n\t\twindow.customElements.define(\"resultant-oscillator-component\", ResultantOscillatorComponent);\r\n\t\tthis.id = \"app\";\r\n\t\tthis.animationsActive = false;\r\n\t\tthis.activeOscillators = [];\r\n\r\n\t\tthis.innerHTML = `\r\n\t\t\t<div id=\"oscillator-scroll-area\"></div>\r\n\t\t\t<header id=\"header-container\">\r\n\t\t\t\t<h1 id=\"title\">Visualising Superposition with Phasors</h1>\r\n\t\t\t\t<button type=\"button\" id=\"start-button\">Play</button>\r\n\t\t\t\t<button type=\"button\" id=\"pause-button\" disabled>Pause</button>\r\n\t\t\t\t<button type=\"button\" id=\"stop-button\" disabled>Stop</button>\r\n\t\t\t</header>\r\n\t\t`;\r\n\r\n\t\tthis.resultantOscillator = new ResultantOscillatorComponent(this);\r\n\t\tthis.insertBefore(this.resultantOscillator, this.querySelector(\"#header-container\"));\r\n\t\tthis.oscillatorScrollArea = this.querySelector(\"#oscillator-scroll-area\");\r\n\r\n\t\tthis.startButton = this.querySelector(\"#start-button\");\r\n\t\tthis.pauseButton = this.querySelector(\"#pause-button\");\r\n\t\tthis.stopButton = this.querySelector(\"#stop-button\");\r\n\t\tthis.startButton.addEventListener(\"click\", () => {\r\n\t\t\tTime.startAll();\r\n\t\t\tthis.animationsActive = true;\r\n\t\t\tthis.startButton.disabled = true;\r\n\t\t\tthis.pauseButton.disabled = false;\r\n\t\t\tthis.stopButton.disabled = false;\r\n\t\t});\r\n\t\tthis.pauseButton.addEventListener(\"click\", () => {\r\n\t\t\tTime.pauseAll();\r\n\t\t\tthis.animationsActive = false;\r\n\t\t\tthis.startButton.disabled = false;\r\n\t\t\tthis.pauseButton.disabled = true;\r\n\t\t\tthis.stopButton.disabled = false;\r\n\t\t});\r\n\t\tthis.stopButton.addEventListener(\"click\", () => {\r\n\t\t\tTime.stopAll();\r\n\t\t\tthis.animationsActive = false;\r\n\t\t\tthis.startButton.disabled = false;\r\n\t\t\tthis.pauseButton.disabled = true;\r\n\t\t\tthis.stopButton.disabled = true;\r\n\t\t});\r\n\t}\r\n\r\n\taddOscillator(...params) {\r\n\t\tconst oscillator = new OscillatorComponent(this, this.activeOscillators.length, ...params);\r\n\t\tthis.activeOscillators.push(oscillator);\r\n\t\tthis.oscillatorScrollArea.appendChild(oscillator);\r\n\t\tthis.resultantOscillator.updatePlots();\r\n\t\tif (this.resultantOscillator.phasor.data[\"phasor-x-component\"].properties.visibility === true) {\r\n\t\t\toscillator.phasor.data[\"phasor-x-component\"].setVisibility(true);\r\n\t\t}\r\n\t}\r\n\r\n\tremoveOscillator(oscillator) {\r\n\t\tthis.activeOscillators.splice(oscillator.order, 1);\r\n\t\tdelete core.activeCanvases[`phasor-${oscillator.order}`];\r\n\t\tdelete core.activeCanvases[`wave-${oscillator.order}`];\r\n\t\toscillator.remove();\r\n\t\tfor (const osc of this.activeOscillators) {\r\n\t\t\tif (osc.order > oscillator.order ) {\r\n\t\t\t\tosc.order -= 1;\r\n\t\t\t\tosc.querySelector(\".oscillator-title\").innerText = `Oscillator ${osc.order + 1}`;\r\n\t\t\t\tTime.canvasTimeData[(2 * osc.order) + 4].id = `phasor-${osc.order}`;\r\n\t\t\t\tcore.activeCanvases[`phasor-${osc.order + 1}`].setID(`phasor-${osc.order}`);\r\n\t\t\t\tTime.canvasTimeData[(2 * osc.order) + 5].id = `wave-${osc.order}`;\r\n\t\t\t\tcore.activeCanvases[`wave-${osc.order + 1}`].setID(`wave-${osc.order}`);\r\n\t\t\t}\r\n\t\t}\r\n\t\tTime.canvasTimeData.splice((2 * oscillator.order) + 2, 2);\r\n\t\tthis.resultantOscillator.updatePlots();\r\n\t}\r\n}\r\n","import { PhasorsApp } from \"./PhasorsApp.js\";\r\n\r\nwindow.customElements.define(\"phasors-app\", PhasorsApp);\r\n\r\nconst app = new PhasorsApp();\r\ndocument.body.appendChild(app);\r\n\r\napp.addOscillator();\r\napp.addOscillator();\r\n"],"sourceRoot":""}