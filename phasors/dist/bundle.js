/*! For license information please see bundle.js.LICENSE.txt */
(()=>{"use strict";const t={setAxesProperty(t,e,i,...s){if(1===s.length&&typeof s[0]===i)t.properties[e]={x:s[0],y:s[0]};else{if(2!==s.length||typeof s[0]!==i||typeof s[1]!==i)throw`Error setting axes property ${e}: Unexpected value ${s}.`;t.properties[e]={x:s[0],y:s[1]}}},setSingleProperty(t,e,i,s){if(typeof s!==i)throw`Error setting single property ${e}: Unexpected type "${s}".`;t.properties[e]=s},setArrayProperty(t,e,i,s,a){if(!Array.isArray(s))throw`Error setting array property ${e}: "${s}" is not an array.`;if(s.length!==a)throw`Error setting array property ${e}: "${s}" is not of length ${a}`;for(const t of s)if(typeof t!==i)throw`Error setting array property ${e}: "Unexpected type "${t}" in array.`;t.properties[e]=s},setChoiceProperty(t,e,i,s,a){if(typeof s!==i)throw`Error setting choice property ${e}: Unexpected type "${s}".`;{let i=!1;for(const r of a)s===r&&(t.properties[e]=s,i=!0);if(!i)throw`Error setting choice property ${e}: Invalid choice "${s}".`}}},e={},i=new class{constructor(){this.values={ResponsiveCanvas:{origin:{x:0,y:0},backgroundCSS:""},ResponsivePlot2D:{origin:{x:0,y:0},backgroundCSS:"",majorTicks:{x:!0,y:!0},minorTicks:{x:!1,y:!1},majorTickSize:{x:5,y:5},minorTickSize:{x:1,y:1},majorGridlines:{x:!0,y:!0},minorGridlines:{x:!1,y:!1},majorGridSize:{x:5,y:5},minorGridSize:{x:1,y:1},xLims:[0,10],yLims:[-10,0]},ResponsivePlot2DTrace:{traceColour:"blue",traceStyle:"solid",traceWidth:3,markerColour:"blue",markerStyle:"none",markerSize:1,visibility:!0,parameterRange:[0,1]}}}create(...t){return Object.assign({},...Array.from(t,(t=>this.values[t])))}mergeOptions(t,e,i){for(const s of Object.keys(i))if(s in this.values[e]){const e=t[`set${s.charAt(0).toUpperCase()}${s.slice(1)}`];void 0!==e&&e.call(t,...Array.isArray(i[s])?i[s]:[i[s]])}}},s=new class{constructor(){this.canvasTimeData=[],this.globalLoopActive=!1,this.startTimestamp=0,this.offsetTimestamp=0}startAll(){for(const t of this.canvasTimeData)t.timeEvolutionActive=!0;this.startTimestamp=performance.now(),this.globalLoopActive=!0,window.requestAnimationFrame((t=>this.updateObjects(t)))}pauseAll(){for(const t of this.canvasTimeData)t.timeEvolutionActive=!1;this.offsetTimestamp=this.offsetTimestamp+performance.now()-this.startTimestamp}stopAll(){for(const t of this.canvasTimeData)t.timeEvolutionActive=!1,e[t.id].currentTimeValue=0,e[t.id].updateForeground();this.startTimestamp=0,this.offsetTimestamp=0,this.globalLoopActive=!1}updateObjects(t){if(this.globalLoopActive){let i=!1;for(const s of this.canvasTimeData)s.timeEvolutionActive&&(i=!0,e[s.id].currentTimeValue=(this.offsetTimestamp+t-this.startTimestamp)/1e3,e[s.id].updateForeground());i?window.requestAnimationFrame((t=>this.updateObjects(t))):this.globalLoopActive=!1}}addObject(t,e=!0){if(void 0!==this.canvasTimeData.find((e=>e.id===t)))throw`Error: Time data for canvas object with ID "${t}" already exists.`;this.canvasTimeData.push({id:t,timeEvolutionActive:e})}};class a{constructor(t,e={}){this.id="",this.properties=i.create("ResponsiveCanvas"),this.currentTimeValue=0;const a=document.createElement("div");a.style.display="grid",a.style.width="100%",a.style.height="100%";const r=document.createElement("canvas");r.style.gridArea="1 / 1";const o=document.createElement("canvas");o.style.gridArea="1 / 1",a.appendChild(r),a.appendChild(o);const n=new ResizeObserver((t=>{for(const e of t)this.resizeEventListener(e),this.updateBackground(),this.updateForeground()}));n.observe(a),this._displayData={width:0,height:0,originArgCache:null,parentElement:null,resizeObserver:n,canvasContainer:a,backgroundCanvas:r,foregroundCanvas:o,background:r.getContext("2d"),foreground:o.getContext("2d"),backgroundFunction:()=>{},foregroundFunction:()=>{}},s.addObject(t),this.setID(t),i.mergeOptions(this,"ResponsiveCanvas",e)}resizeEventListener(t){this._displayData.width=t.target.clientWidth,this._displayData.height=t.target.clientHeight,this._displayData.backgroundCanvas.width=this._displayData.width,this._displayData.backgroundCanvas.height=this._displayData.height,this._displayData.foregroundCanvas.width=this._displayData.width,this._displayData.foregroundCanvas.height=this._displayData.height,null!==this._displayData.originArgCache&&this.setOrigin(this._displayData.originArgCache),this._displayData.background.translate(this.properties.origin.x,this.properties.origin.y),this._displayData.foreground.translate(this.properties.origin.x,this.properties.origin.y)}updateBackground(){this._displayData.background.clearRect(-this.properties.origin.x,-this.properties.origin.y,this._displayData.width,this._displayData.height),this._displayData.backgroundFunction(this._displayData.background)}updateForeground(){this._displayData.foreground.clearRect(-this.properties.origin.x,-this.properties.origin.y,this._displayData.width,this._displayData.height),this._displayData.foregroundFunction(this._displayData.foreground,this.currentTimeValue)}setBackground(t){this._displayData.backgroundFunction=t,this.updateBackground()}setForeground(t){this._displayData.foregroundFunction=t,this.updateForeground()}setOrigin(...e){1===e.length&&"centre"===e[0]?(t.setAxesProperty(this,"origin","number",Math.round(this._displayData.width/2),Math.round(this._displayData.height/2)),this._displayData.originArgCache=e[0]):(t.setAxesProperty(this,"origin","number",...e),this._displayData.originArgCache=null),this._displayData.background.resetTransform(),this._displayData.background.translate(this.properties.origin.x,this.properties.origin.y),this.updateBackground(),this._displayData.foreground.resetTransform(),this._displayData.foreground.translate(this.properties.origin.x,this.properties.origin.y),this.updateForeground()}setID(t){if(void 0!==e[t])throw`Error creating ResponsiveCanvas object: Object with ID "${t}" already exists.`;delete e[this.id],s.canvasTimeData.find((e=>e.id===t)).id=t,this.id=t,e[this.id]=this}setBackgroundCSS(e){t.setSingleProperty(this,"backgroundCSS","string",e),this._displayData.backgroundCanvas.style.background=e}show(t){if(t instanceof Element?this._displayData.parentElement=t:this._displayData.parentElement=document.querySelector(t),null===this._displayData.parentElement)throw`HTMLElement with querySelector "${t}" could not be found.`;this._displayData.parentElement.appendChild(this._displayData.canvasContainer),this._displayData.width=this._displayData.canvasContainer.clientWidth,this._displayData.height=this._displayData.canvasContainer.clientHeight,null!==this._displayData.originArgCache&&this.setOrigin(this._displayData.originArgCache),this.setBackgroundCSS(this.properties.backgroundCSS)}hide(){null!==this._displayData.parentElement&&(this._displayData.parentElement.removeChild(this._displayData.canvasContainer),this._displayData.parentElement=null)}}class r{constructor(t,e,s={}){if(this.properties=i.create("ResponsivePlot2DTrace"),this.plot=t,i.mergeOptions(this,"ResponsivePlot2DTrace",s),Array.isArray(e)&&2===e.length){if(Array.isArray(e[0])){if(Array.isArray(e[1])){if(e[0].length!==e[1].length)throw"Error setting plot data: Lengths of data arrays are not equal.";for(let t=0;t<e[0].length;t++){const i="function"==typeof e[0][t]?e[0][t](0):e[0][t],s="function"==typeof e[1][t]?e[1][t](0,0):e[1][t];if("number"!=typeof i||"number"!=typeof s)throw"Error setting plot data: Data arrays contain types which are not numbers."}this.data=function(t){return function*(e){for(let i=0;i<t[0].length;i++){const s="function"==typeof t[0][i]?t[0][i](e):t[0][i],a="function"==typeof t[1][i]?t[1][i](s,e):t[1][i];yield[s,a]}}}(e)}else if("function"==typeof e[1]){if("number"!=typeof e[1](0,0))throw"Error setting plot data: Plot function does not return numbers.";for(let t=0;t<e[0].length;t++)if("number"!=typeof e[0][t])throw"Error setting plot data: Data array contains types which are not numbers.";this.data=function(t){return function*(e){for(const i of t[0])yield[i,t[1](i,e)]}}(e)}}else if("function"==typeof e[0]&&"function"==typeof e[1]){if("number"!=typeof e[0](0,0)||"number"!=typeof e[1](0,0))throw"Error setting plot data: Plot function does not return numbers.";this.data=function(t){return function*(e,i,s,a,r){let o=i=>t[0](i,e),n=i=>t[1](i,e),l=r[0];for(;l<=r[1];)yield[o(l),n(l)],l+=a;yield[o(l),n(l)]}}(e)}}else{if("function"!=typeof e)throw`Error setting plot data: Unrecognised data signature ${e}.`;if("number"!=typeof e(0,0))throw"Error setting plot data: Plot function does not return numbers.";this.data=(a=e,function*(t,e,i,s){let r=e[0],o=e=>a(e,t);for(;r<=e[1];){for(;!(r>e[1]);){if(o(r)<=i[1]&&o(r)>=i[0]&&!Number.isNaN(o(r))){yield[r-s,o(r-s)];break}r+=s}for(;yield[r,o(r)],!(r>e[1]||o(r)>i[1]||o(r)<i[0]||Number.isNaN(o(r)));)r+=s}})}var a}setTraceColour(e){t.setSingleProperty(this,"traceColour","string",e),this.plot.updatePlottingData()}setTraceStyle(e){t.setChoiceProperty(this,"traceStyle","string",e,["solid","dotted","dashed","dashdot","none"]),this.plot.updatePlottingData()}setTraceWidth(e){t.setSingleProperty(this,"traceWidth","number",e),this.plot.updatePlottingData()}setMarkerColour(e){t.setSingleProperty(this,"markerColour","string",e),this.plot.updatePlottingData()}setMarkerStyle(e){t.setChoiceProperty(this,"markerStyle","string",e,["circle","plus","cross","arrow","none"]),this.plot.updatePlottingData()}setMarkerSize(e){t.setSingleProperty(this,"markerSize","number",e),this.plot.updatePlottingData()}setVisibility(e){t.setSingleProperty(this,"visibility","boolean",e),this.plot.updatePlottingData()}setParameterRange(e,i){if(!(i>=e))throw"Error setting parameterRange: Lower limit cannot be higher than or equal to higher limit.";t.setArrayProperty(this,"parameterRange","number",[e,i],2),this.plot.updatePlottingData()}}class o extends a{constructor(t,e={}){super(t,e),this.properties=i.create("ResponsiveCanvas","ResponsivePlot2D"),this.gridScale={x:0,y:0},this.data={},i.mergeOptions(this,"ResponsivePlot2D",e),this.setBackground((t=>{const e=(e,i,s,a,r,o)=>{const n=a%2==0?0:.5,l=this.properties[e+("Ticks"===s?"TickSize":"GridSize")][i];if(t.lineWidth=a,this.properties[`${e}${s}`][i]){t.beginPath();let e=-Math.floor(this.properties.origin[i]/(l*this.gridScale[i]))*l*this.gridScale[i];if("x"===i)for(;e<this._displayData.width-this.properties.origin.x;)t.moveTo(e+n,r),t.lineTo(e+n,o),e+=this.gridScale.x*l;else if("y"===i)for(;e<this._displayData.height-this.properties.origin.y;)t.moveTo(r,e+n),t.lineTo(o,e+n),e+=this.gridScale.y*l;t.stroke()}};t.lineCap="square",t.strokeStyle="rgb(0, 0, 0)",e("minor","x","Gridlines",1,-this.properties.origin.y,this._displayData.height-this.properties.origin.y),e("minor","y","Gridlines",1,-this.properties.origin.x,this._displayData.width-this.properties.origin.x),e("major","x","Gridlines",2,-this.properties.origin.y,this._displayData.height-this.properties.origin.y),e("major","y","Gridlines",2,-this.properties.origin.x,this._displayData.width-this.properties.origin.x),e("minor","x","Ticks",1,-3,3),e("minor","y","Ticks",1,-3,3),e("major","x","Ticks",2,-6,6),e("major","y","Ticks",2,-6,6),t.beginPath(),t.lineWidth=3,t.moveTo(.5,-this.properties.origin.y),t.lineTo(.5,this._displayData.height-this.properties.origin.y),t.moveTo(-this.properties.origin.x,.5),t.lineTo(this._displayData.width-this.properties.origin.x,.5),t.stroke()}))}resizeEventListener(t){super.resizeEventListener(t),this.setXLims(...this.properties.xLims),this.setYLims(...this.properties.yLims)}updatePlottingData(){this.setForeground(((t,e)=>{for(const i of Object.keys(this.data))if(this.data[i].properties.visibility){const s=this.data[i];if("none"!==s.properties.traceStyle){switch(t.strokeStyle=s.properties.traceColour,t.lineWidth=s.properties.traceWidth,t.lineJoin="round",s.properties.traceStyle){case"solid":t.setLineDash([]);break;case"dotted":t.setLineDash([3,3]);break;case"dashed":t.setLineDash([10,10]);break;case"dashdot":t.setLineDash([15,3,3,3])}const i=s.data(e,this.properties.xLims,this.properties.yLims,.01,s.properties.parameterRange);t.beginPath();for(const e of i)Number.isSafeInteger(Math.round(e[1]))||(e[1]=e[1]>0?Number.MAX_SAFE_INTEGER:Number.MIN_SAFE_INTEGER),t.lineTo(e[0]*this.gridScale.x,-e[1]*this.gridScale.y);t.stroke()}if("none"!==s.properties.markerStyle){const i=s.properties.markerSize;t.strokeStyle=s.properties.markerColour,t.fillStyle=s.properties.markerColour,t.lineWidth=2*i;const a=(()=>{switch(s.properties.markerStyle){case"circle":return(t,e,s)=>{t.arc(e,s,5*i,0,2*Math.PI),t.fill()};case"plus":return(t,e,s)=>{t.moveTo(e,s+5*i),t.lineTo(e,s-5*i),t.moveTo(e+5*i,s),t.lineTo(e-5*i,s),t.stroke()};case"cross":return(t,e,s)=>{t.moveTo(e+5*i,s+5*i),t.lineTo(e-5*i,s-5*i),t.moveTo(e-5*i,s+5*i),t.lineTo(e+5*i,s-5*i),t.stroke()};case"arrow":return(t,e,s,a)=>{isNaN(a)||(t.translate(e,s),t.rotate(-a-Math.PI/2),t.moveTo(0,-7*i),t.lineTo(-5*i,7*i),t.lineTo(5*i,7*i),t.lineTo(0,-7*i),t.fill(),t.rotate(a+Math.PI/2),t.translate(-e,-s))}}})(),r=s.data(e,this.properties.xLims,this.properties.yLims,.001,s.properties.parameterRange);let o=[NaN,NaN];for(const e of r){t.beginPath();const i=[e[0]*this.gridScale.x,-e[1]*this.gridScale.y],s=Math.atan2(i[1]-o[1],-i[0]+o[0]);a(t,...i,s),o=i}}}}))}addData(t,e,i={}){if(void 0!==this.data[t])throw`Error setting plot data: trace with ID ${t} already exists on current plot, call removeData() to remove.`;this.data[t]=new r(this,e,i),this.updatePlottingData()}removeData(t){delete this.data[t],this.updatePlottingData()}setOrigin(...t){super.setOrigin(...t),null!==this._displayData.parentElement&&this.gridScale.x>0&&this.gridScale.y>0&&(this.properties.xLims=[-this.properties.origin.x/this.gridScale.x,(this._displayData.width-this.properties.origin.x)/this.gridScale.x],this.properties.yLims=[-(this._displayData.height-this.properties.origin.y)/this.gridScale.y,this.properties.origin.y/this.gridScale.y],this.updatePlottingData())}setMajorTicks(...e){t.setAxesProperty(this,"majorTicks","boolean",...e),this.updateBackground()}setMinorTicks(...e){t.setAxesProperty(this,"minorTicks","boolean",...e),this.updateBackground()}setMajorTickSize(...e){t.setAxesProperty(this,"majorTickSize","number",...e),this.updateBackground()}setMinorTickSize(...e){t.setAxesProperty(this,"minorTickSize","number",...e),this.updateBackground()}setMajorGridlines(...e){t.setAxesProperty(this,"majorGridlines","boolean",...e),this.updateBackground()}setMinorGridlines(...e){t.setAxesProperty(this,"minorGridlines","boolean",...e),this.updateBackground()}setMajorGridSize(...e){t.setAxesProperty(this,"majorGridSize","number",...e),this.updateBackground()}setMinorGridSize(...e){t.setAxesProperty(this,"minorGridSize","number",...e),this.updateBackground()}setXLims(e,i){if(!(i>=e))throw"Error setting xLims: Lower limit cannot be higher than or equal to higher limit.";t.setArrayProperty(this,"xLims","number",[e,i],2),this.gridScale.x=this._displayData.width/Math.abs(this.properties.xLims[0]-this.properties.xLims[1]),this.setOrigin(-this.properties.xLims[0]*this.gridScale.x,this.properties.origin.y),this.updatePlottingData()}setYLims(e,i){if(!(i>=e))throw"Error setting yLims: Lower limit cannot be higher than or equal to higher limit.";t.setArrayProperty(this,"yLims","number",[e,i],2),this.gridScale.y=this._displayData.height/Math.abs(this.properties.yLims[0]-this.properties.yLims[1]),this.setOrigin(this.properties.origin.x,this.properties.yLims[1]*this.gridScale.y),this.updatePlottingData()}show(t){super.show(t),this.setXLims(...this.properties.xLims),this.setYLims(...this.properties.yLims)}}class n extends o{static activePlots(){const t={};for(const i of Object.keys(e))e[i]instanceof n&&(t[i]=e[i]);return t}constructor(t,e,i={}){super(t,i),void 0!==e&&this.addData(e.id,e.data,e.options)}}class l extends HTMLElement{static MIN_FREQ=.1;static MAX_FREQ=2;static DEF_FREQ=1;static MIN_AMP=.1;static MAX_AMP=2;static DEF_AMP=1;constructor(t,e,i=l.DEF_FREQ,s=l.DEF_AMP,a=0){super(),this.app=t,this.order=e,this.frequency=i,this.amplitude=s,this.phase=a,this.innerHTML=`\n\t\t\t<div class="oscillator-controls">\n\t\t\t\t<h2 class="oscillator-title">Oscillator ${this.order+1}</h2>\n\t\t\t\t<label class="oscillator-label">\n\t\t\t\t\t<input class="oscillator-slider frequency-input" type="range" min="${l.MIN_FREQ}" max="${l.MAX_FREQ}" step="0.01" value="${this.frequency}">\n\t\t\t\t\tFrequency: <span class="oscillator-label-value">${this.frequency}</span>Hz\n\t\t\t\t</label>\n\t\t\t\t<label class="oscillator-label">\n\t\t\t\t\t<input class="oscillator-slider amplitude-input" type="range" min="${l.MIN_AMP}" max="${l.MAX_AMP}" step="0.01" value="${this.amplitude}">\n\t\t\t\t\tAmplitude: <span class="oscillator-label-value">${this.amplitude}</span>m\n\t\t\t\t</label>\n\t\t\t\t<label class="oscillator-label">\n\t\t\t\t\t<input class="oscillator-slider phase-input" type="range" min="${-2*Math.PI}" max="${2*Math.PI}" step="0.01" value="${this.phase}">\n\t\t\t\t\tPhase shift: <span class="oscillator-label-value">${+(Math.round(+(this.phase/Math.PI+"e+2"))+"e-2")}</span>pi\n\t\t\t\t</label>\n\t\t\t</div>\n\t\t\t<figure class="phasor"></figure>\n\t\t\t<figure class="wave">\n\t\t\t\t<div class="oscillator-button-bar">\n\t\t\t\t\t<button type="button" class="hide-button">Hide</button>\n\t\t\t\t\t<button type="button" class="duplicate-button">Duplicate</button>\n\t\t\t\t\t<button type="button" class="remove-button">Remove</button>\n\t\t\t\t</div>\n\t\t\t</figure>\n\t\t`,this.classList.add("oscillator-container"),this.phasor=new n(`phasor-${this.order}`,void 0,{backgroundCSS:"lightseagreen",majorGridlines:!1,minorGridlines:!0,majorTicks:!1,minorTicks:!0,minorTickSize:.25,xLims:[-3,3],yLims:[-3,3]}),this.phasor.addData("phasor-x-component",[[0,t=>this.amplitude*Math.cos(2*Math.PI*this.frequency*t+this.phase),t=>this.amplitude*Math.cos(2*Math.PI*this.frequency*t+this.phase)],[0,0,(t,e)=>this.amplitude*Math.sin(2*Math.PI*this.frequency*e+this.phase)]],{traceColour:"red",markerStyle:"arrow",markerColour:"red",visibility:!1}),this.phasor.addData("phasor",[[0,t=>this.amplitude*Math.cos(2*Math.PI*this.frequency*t+this.phase)],[0,(t,e)=>this.amplitude*Math.sin(2*Math.PI*this.frequency*e+this.phase)]],{traceColour:"yellow",markerColour:"yellow",markerStyle:"arrow"}),this.wave=new n(`wave-${this.order}`,void 0,{backgroundCSS:"lightseagreen",majorGridlines:!1,minorGridlines:!0,majorTicks:!1,minorTicks:!0,minorTickSize:.25,xLims:[-2,10],yLims:[-3,3]}),this.wave.addData("wave",((t,e)=>this.amplitude*Math.cos(2*Math.PI*this.frequency*(t-e)-this.phase)),{traceColour:"yellow"}),this.querySelector(".frequency-input").addEventListener("input",(t=>{this.frequency=parseFloat(t.target.value),this.updatePlots(),this.app.resultantOscillator.updatePlots(),t.target.parentElement.querySelector(".oscillator-label-value").innerText=t.target.value})),this.querySelector(".amplitude-input").addEventListener("input",(t=>{this.amplitude=parseFloat(t.target.value),this.updatePlots(),this.app.resultantOscillator.updatePlots(),t.target.parentElement.querySelector(".oscillator-label-value").innerText=t.target.value})),this.querySelector(".phase-input").addEventListener("input",(t=>{this.phase=parseFloat(t.target.value),this.updatePlots(),this.app.resultantOscillator.updatePlots(),t.target.parentElement.querySelector(".oscillator-label-value").innerText=+(Math.round(+(t.target.value/Math.PI+"e+2"))+"e-2")})),this.querySelector(".hide-button").addEventListener("click",(t=>{this.classList.contains("hidden")?(this.show(),t.target.innerText="Hide"):(this.hide(),t.target.innerText="Show")})),this.querySelector(".remove-button").addEventListener("click",(()=>{this.app.removeOscillator(this)})),this.querySelector(".duplicate-button").addEventListener("click",(()=>{this.app.addOscillator(this.frequency,this.amplitude,this.phase)})),this.phasor.show(this.querySelector(".phasor")),this.wave.show(this.querySelector(".wave"))}updatePlots(){this.app.animationsActive||(this.phasor.updatePlottingData(),this.wave.updatePlottingData())}show(){this.classList.remove("hidden"),this.phasor.data.phasor.setVisibility(!0),this.wave.data.wave.setVisibility(!0)}hide(){this.classList.add("hidden"),this.phasor.data.phasor.setVisibility(!1),this.phasor.data["phasor-x-component"].setVisibility(!1),this.wave.data.wave.setVisibility(!1)}}class h extends HTMLElement{constructor(t){super(),this.app=t,this.innerHTML='\n\t\t\t<div class="oscillator-controls">\n\t\t\t\t<h2 class="oscillator-title">Resultant Oscillator</h2>\n\t\t\t\t<button type="button" id="add-oscillator-button">Add Oscillator</button>\n\t\t\t\t<button type="button" id="show-x-components-button"><span>Show</span> x Components</button>\n\t\t\t\t<div class="inline-oscillator-controls">\n\t\t\t\t\t<button type="button" id="show-all-button">Show All</button>\n\t\t\t\t\t<button type="button" id="hide-all-button">Hide All</button>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<figure id="resultant-phasor" class="phasor"></figure>\n\t\t\t<figure id="resultant-wave" class="wave"></figure>\n\t\t',this.id="resultant-oscillator",this.classList.add("oscillator-container"),this.phasor=new n("resultant-phasor",void 0,{backgroundCSS:"lightseagreen",majorGridlines:!1,minorGridlines:!0,majorTicks:!1,minorTicks:!0,minorTickSize:.25,xLims:[-5,5],yLims:[-5,5]}),this.phasor.addData("phasor-x-component",[[0,t=>this.app.activeOscillators.reduce(((e,i)=>e+i.amplitude*Math.cos(2*Math.PI*i.frequency*t+i.phase)),0),t=>this.app.activeOscillators.reduce(((e,i)=>e+i.amplitude*Math.cos(2*Math.PI*i.frequency*t+i.phase)),0)],[0,0,(t,e)=>this.app.activeOscillators.reduce(((t,i)=>t+i.amplitude*Math.sin(2*Math.PI*i.frequency*e+i.phase)),0)]],{traceColour:"red",markerStyle:"arrow",markerColour:"red",visibility:!1}),this.phasor.addData("resultant-phasor",[[0,t=>this.app.activeOscillators.reduce(((e,i)=>e+i.amplitude*Math.cos(2*Math.PI*i.frequency*t+i.phase)),0)],[0,(t,e)=>this.app.activeOscillators.reduce(((t,i)=>t+i.amplitude*Math.sin(2*Math.PI*i.frequency*e+i.phase)),0)]],{traceColour:"yellow",markerColour:"yellow",markerStyle:"arrow"}),this.wave=new n("resultant-wave",{id:"resultant-phasor",data:(t,e)=>this.app.activeOscillators.reduce(((i,s)=>i+s.amplitude*Math.cos(2*Math.PI*s.frequency*(t-e)-s.phase)),0),options:{traceColour:"yellow"}},{backgroundCSS:"lightseagreen",majorGridlines:!1,minorGridlines:!0,majorTicks:!1,minorTicks:!0,minorTickSize:.25,xLims:[-2,10],yLims:[-5,5]}),this.querySelector("#add-oscillator-button").addEventListener("click",(()=>this.app.addOscillator())),this.querySelector("#show-all-button").addEventListener("click",(()=>{for(const t of this.app.activeOscillators)t.show()})),this.querySelector("#show-x-components-button").addEventListener("click",(t=>{if("Show"===t.target.querySelector("span").innerText){t.target.querySelector("span").innerText="Hide",this.phasor.data["phasor-x-component"].setVisibility(!0);for(const t of this.app.activeOscillators)t.phasor.data["phasor-x-component"].setVisibility(!0)}else{t.target.querySelector("span").innerText="Show",this.phasor.data["phasor-x-component"].setVisibility(!1);for(const t of this.app.activeOscillators)t.phasor.data["phasor-x-component"].setVisibility(!1)}})),this.querySelector("#hide-all-button").addEventListener("click",(()=>{for(const t of this.app.activeOscillators)t.hide()})),this.phasor.show(this.querySelector(".phasor")),this.wave.show(this.querySelector(".wave"))}updatePlots(){this.app.animationsActive||(this.phasor.updatePlottingData(),this.wave.updatePlottingData())}}const p={ResponsiveCanvas:a,activeCanvases:e};class d extends HTMLElement{constructor(){super(),window.customElements.define("oscillator-component",l),window.customElements.define("resultant-oscillator-component",h),this.id="app",this.animationsActive=!1,this.activeOscillators=[],this.innerHTML='\n\t\t\t<div id="oscillator-scroll-area"></div>\n\t\t\t<header id="header-container">\n\t\t\t\t<h1 id="title">Visualising Superposition with Phasors</h1>\n\t\t\t\t<button type="button" id="start-button">Play</button>\n\t\t\t\t<button type="button" id="pause-button" disabled>Pause</button>\n\t\t\t\t<button type="button" id="stop-button" disabled>Stop</button>\n\t\t\t</header>\n\t\t',this.resultantOscillator=new h(this),this.insertBefore(this.resultantOscillator,this.querySelector("#header-container")),this.oscillatorScrollArea=this.querySelector("#oscillator-scroll-area"),this.startButton=this.querySelector("#start-button"),this.pauseButton=this.querySelector("#pause-button"),this.stopButton=this.querySelector("#stop-button"),this.startButton.addEventListener("click",(()=>{s.startAll(),this.animationsActive=!0,this.startButton.disabled=!0,this.pauseButton.disabled=!1,this.stopButton.disabled=!1})),this.pauseButton.addEventListener("click",(()=>{s.pauseAll(),this.animationsActive=!1,this.startButton.disabled=!1,this.pauseButton.disabled=!0,this.stopButton.disabled=!1})),this.stopButton.addEventListener("click",(()=>{s.stopAll(),this.animationsActive=!1,this.startButton.disabled=!1,this.pauseButton.disabled=!0,this.stopButton.disabled=!0}))}addOscillator(...t){const e=new l(this,this.activeOscillators.length,...t);this.activeOscillators.push(e),this.oscillatorScrollArea.appendChild(e),this.resultantOscillator.updatePlots(),!0===this.resultantOscillator.phasor.data["phasor-x-component"].properties.visibility&&e.phasor.data["phasor-x-component"].setVisibility(!0)}removeOscillator(t){this.activeOscillators.splice(t.order,1),delete p.activeCanvases[`phasor-${t.order}`],delete p.activeCanvases[`wave-${t.order}`],t.remove();for(const e of this.activeOscillators)e.order>t.order&&(e.order-=1,e.querySelector(".oscillator-title").innerText=`Oscillator ${e.order+1}`,s.canvasTimeData[2*e.order+4].id=`phasor-${e.order}`,p.activeCanvases[`phasor-${e.order+1}`].setID(`phasor-${e.order}`),s.canvasTimeData[2*e.order+5].id=`wave-${e.order}`,p.activeCanvases[`wave-${e.order+1}`].setID(`wave-${e.order}`));s.canvasTimeData.splice(2*t.order+2,2),this.resultantOscillator.updatePlots()}}window.customElements.define("phasors-app",d);const c=new d;document.body.appendChild(c),c.addOscillator(),c.addOscillator()})();
//# sourceMappingURL=bundle.js.map